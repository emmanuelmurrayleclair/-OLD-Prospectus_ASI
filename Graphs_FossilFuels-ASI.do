set scheme burd
* Clean fuel data
replace Coal = 0 if Coal == . & (Oil > 0 | Natgas > 0)
replace Oil = 0 if Oil == . & (Coal > 0 | Natgas > 0)
replace Natgas = 0 if Natgas == . & (Oil > 0 | Coal > 0)
drop if Natgas == . & Coal == 0 & Oil == 0

*--------------------------------
* Graphs: Price of Energy sources
*--------------------------------
gen labor_revprod = SalesGross_tot/nEmployees_tot
********** Natural Gas and Coal ************

* Convert units to mmBtu 
/*
gen p_natgas = .
gen p_coal = .
forvalues t = 2001/2018{
	su Natgas_price if yr == `t', detail
	replace p_natgas = r(p50) if yr == `t'
	su Coal_price if yr == `t', detail
	replace p_coal = r(p50) if yr == `t'
}
gen natgas_mmbtu = Natgas_qty*0.04739 if Natgas_unit == 9 // Kg to mmbtu
gen coal_mmbtu = Coal_qty*27.78 if Coal_unit == 27 // ton to mmbtu
gen p_natgas_mmbtu = p_natgas/0.04739 
gen p_coal_mmbtu = p_coal/27.78
replace p_natgas_mmbtu = . if p_natgas_mmbtu == 0
replace p_coal_mmbtu = . if p_coal_mmbtu == 0
*/


gen natgas_mmbtu = Natgas_qty*0.04739 if Natgas_unit == 9 // Kg to mmbtu
gen coal_mmbtu = Coal_qty*27.78 if Coal_unit == 27 // ton to mmbtu
gen p_natgas_mmbtu = Natgas_price/0.04739 
gen p_coal_mmbtu = Coal_price/27.78
replace p_natgas_mmbtu = . if p_natgas_mmbtu == 0
replace p_coal_mmbtu = . if p_coal_mmbtu == 0


* Remove outliers
su p_natgas_mmbtu, detail
replace p_natgas_mmbtu = . if p_natgas_mmbtu > r(p99)
su natgas_mmbtu, detail
replace natgas_mmbtu = . if natgas_mmbtu > r(p99)

* Graph for price of natural gas, coal and oil
preserve
	collapse (median) p_natgas_mmbtu p_coal_mmbtu p_oil_mmbtu, by(yr)
	drop if yr < 2009
	graph twoway (connected p_natgas_mmbtu yr) (connected p_coal_mmbtu yr) (connected p_oil_mmbtu yr), ///
	xlabel(2009[1]2018) ytitle("Median price (rupee per mmBtu)") xtitle("Year") ///
	legend(label(1 "Natural gas") label(2 "Coal") label(3 "Oil")) 
	graph export Output\Graphs\FuelPrices_Year.pdf, replace 
restore

********** Natural Gas, Coal, Oil and Electricity ************

* Convert electricity units (kwh) to mBbtu
gen elecb_mmbtu = ElecBought_qty*0.003412 if ElecBought_unit == 28
gen p_elec_mmbtu = ElecBought_price/0.003412 if ElecBought_unit == 28
gen elecg_mmbtu = ElecOwn_qty*0.003412 if ElecBought_unit == 28
gen p_elecg_mmbtu = ElecOwn_price/0.003412 if ElecBought_unit == 28
* Graph for all prices
preserve
	collapse (median) p_natgas_mmbtu p_coal_mmbtu p_oil_mmbtu p_elec_mmbtu, by(yr)
	drop if yr < 2009
	graph twoway (connected p_natgas_mmbtu yr) (connected p_coal_mmbtu yr) (connected p_oil_mmbtu yr) ///
	(connected p_elec_mmbtu yr), xlabel(2009[1]2018) ytitle("Median price (rupee per mmBtu)") xtitle("Year") ///
	graphregion(color(white)) legend(label(1 "Natural gas") label(2 "Coal") label(3 "Oil") label(4 "Electricity"))
	graph export Output\Graphs\EnergyPrices_Year.pdf, replace 
restore 

*---------------------------------------------
* Graph: emission intensity of energy sources
*---------------------------------------------

* Coal
gen gamma_coal = 98.02503 + 25*(11/1000) + 298*(1.6/1000)
lab var gamma_coal "Emission Factor - Coal"
* Oil
gen gamma_oil = 71.19316 + 25*(3/1000) + 298*(0.6/1000)
lab var gamma_oil "Emission Factor - Oil"
* Natural Gas
gen gamma_natgas = 53.06 + (25/1000) + 298*(0.1/1000)
lab var gamma_natgas "Emission Factor - Natural Gas"
* Electricity
gen oil_mmbtu = Oil/p_oil_mmbtu
* Including electricity
preserve
	keep if ind3d == 351 // Only look at electricity generated by power plants
	bysort yr: egen tot_elecsold_mmbtu = total(elecsold_qty_mmbtu)
	bysort yr: egen tot_elecg_mmbtu = total(elecg_mmbtu)
	bysort yr: egen tot_oil_mmbtu = total(oil_mmbtu)
	bysort yr: egen tot_coal_mmbtu = total(coal_mmbtu)
	bysort yr: egen tot_natgas_mmbtu = total(natgas_mmbtu)
	bysort yr: gen gamma_elec = (gamma_coal*tot_coal_mmbtu + gamma_oil*tot_oil_mmbtu + gamma_natgas*tot_natgas_mmbtu)/tot_elecsold_mmbtu
	graph twoway (line gamma_coal yr) (line gamma_oil yr) (line gamma_natgas yr) (line gamma_elec yr), ///
	graphregion(color(white)) legend(label(1 "Coal") label(2 "Oil") label(3 "Natural Gas") label(4 "Electricity")) ///
	xlabel(2001[4]2018)
	graph export Output\Graphs\EmissionIntensity_byEnergy.pdf, replace
restore
* Only fuel
preserve
	collapse (mean) gamma_coal gamma_oil gamma_natgas
	lab var gamma_natgas "Natural Gas"
	lab var gamma_oil "Oil"
	lab var gamma_coal "Coal"
	graph bar (asis) gamma_coal gamma_oil gamma_natgas, ///
	showyvars bargap(50) blabel(bar) legend(off)
	graph export Output\Graphs\EmissionIntensity_byFuel.pdf, replace
restore


*---------------------------------------------------
* Graphs: Energy sources and spending shares
*---------------------------------------------------
/*
gen ind_dum = 0
replace ind_dum = 1 if ind4d == 2394 | ind4d == 2410 | ind4d == 1701 | ind4d ==  2420 | ind4d == 2310
twoway (hist logEint_mmbtu if ind_dum == 1, frac lcolor(gs12) fcolor(gs12)) ///
		(hist logEint_mmbtu if ind_dum == 0, frac lcolor(red) fcolor(none))
*/

keep if yr >= 2009 
keep if ind4d == 2394 | ind4d == 2410 | ind4d == 1701 | ind4d ==  2420 //| ind4d == 2310

*** Fossil fuels only ****
* Remove outliers
/*
su Natgas, detail
replace Natgas = . if Natgas > r(p99)
su Coal, detail
replace Coal = . if Coal > r(p99)
su Oil, detail
replace Oil = . if Oil > r(p99)
su ElecBought, detail
*/
replace ElecBought = . if ElecBought > r(p99)
* Generate price index and quantities for Coal, Natural gas and oil by year (for firms where we only observe spending)
bysort yr: egen p_coal_mmbtu_index = median(p_coal_mmbtu)
bysort yr: egen p_natgas_mmbtu_index = median(p_natgas_mmbtu)
replace coal_mmbtu = Coal/p_coal_mmbtu_index if coal_mmbtu == . // For firms where I only observe spending, use price index
replace natgas_mmbtu = Natgas/p_natgas_mmbtu_index if natgas_mmbtu == . // For firms where I only observe spending, use price index
gen anyfuel_mmbtu = 1 if (oil_mmbtu != .) | (natgas_mmbtu != .) | (coal_mmbtu != .)
replace oil_mmbtu = 0 if (oil_mmbtu == .) & (anyfuel_mmbtu == 1)
replace natgas_mmbtu = 0 if (natgas_mmbtu == .) & (anyfuel_mmbtu == 1)
replace coal_mmbtu = 0 if (coal_mmbtu == .) & (anyfuel_mmbtu == 1)
* Define fuel quantity shares
gen totfuel_mmbtu = oil_mmbtu+natgas_mmbtu+coal_mmbtu
gen oil_s = oil_mmbtu/totfuel_mmbtu
gen natgas_s = natgas_mmbtu/totfuel_mmbtu
gen coal_s = coal_mmbtu/totfuel_mmbtu
* Define fuel spending shares
gen anyfuel = 1 if (Oil != .) | (Natgas != .) | (Coal != .) | (OtherFuel != .)
replace Oil = 0 if (Oil == .) & (anyfuel == 1)
replace Natgas = 0 if (Natgas == .) & (anyfuel == 1)
replace Coal = 0 if (Coal == .) & (anyfuel == 1)
gen TotalFuel = Oil + Natgas + Coal
gen coal_ss = Coal/TotalFuel
gen natgas_ss = Natgas/TotalFuel
gen oil_ss = Oil/TotalFuel

*** Graph that compare aggregate fuel spending shares from different sources ***
preserve
	collapse (sum) Oil Natgas Coal, by(yr)
	gen fueltot = Oil+Natgas+Coal
	gen oil_ss = Oil/fueltot
	gen natgas_ss = Natgas/fueltot
	gen coal_ss = Coal/fueltot
	graph twoway (connected natgas_ss yr if yr >= 2009) (connected coal_ss yr if yr >= 2009) (connected oil_ss yr if yr >= 2009), ///
	graphregion(color(white)) legend(label(1 "Natural Gas") label(2 "Coal") label(3 "Oil")) ///
	xlabel(2009[1]2018)
	graph export Output/Graphs/FuelSpendingShare_year.pdf, replace
restore
*** Graph that compare aggregate fuel quantity shares from different sources (mmbtu) ***
preserve
	collapse (sum) oil_mmbtu coal_mmbtu natgas_mmbtu, by(yr)
	gen fueltot = oil_mmbtu + coal_mmbtu + natgas_mmbtu
	gen oil_s = oil_mmbtu/fueltot
	gen natgas_s = natgas_mmbtu/fueltot
	gen coal_s = coal_mmbtu/fueltot
	graph twoway (connected natgas_s yr if yr >= 2009) (connected coal_s yr if yr >= 2009) (connected oil_s yr if yr >= 2009), ///
	graphregion(color(white)) legend(label(1 "Natural Gas") label(2 "Coal") label(3 "Oil")) ///
	xlabel(2009[1]2018)
	graph export Output/Graphs/FuelQuantityShare_year.pdf, replace
restore
*** Including Electricity ***
replace ElecBought = 0 if ElecBought == . & TotalFuel != .
replace TotalFuel = 0 if ElecBought != . & TotalFuel == .
gen Energy = TotalFuel + ElecBought
gen se_elec = ElecBought/Energy
gen se_oil = Oil/Energy
gen se_natgas = Natgas/Energy
gen se_coal = Coal/Energy
*** Graph that compare aggregate energy spending shares from different sources ***
preserve
	collapse (sum) Oil Natgas Coal ElecBought Energy, by(yr)
	gen oil_ss = Oil/Energy
	gen natgas_ss = Natgas/Energy
	gen coal_ss = Coal/Energy
	gen elec_ss = ElecBought/Energy
	graph twoway (connected natgas_ss yr if yr >= 2009) (connected coal_ss yr if yr >= 2009) (connected oil_ss yr if yr >= 2009) (connected elec_ss yr if yr >= 2009), ///
	graphregion(color(white)) legend(label(1 "Natural Gas") label(2 "Coal") label(3 "Oil") label(4 "Electricity")) ///
	xlabel(2009[1]2018)
	graph export Output/Graphs/EnergySpendingShare_year.pdf, replace
restore
*** Graph that compares aggregate quantity shares from different energy sources ***
preserve
	replace coal_mmbtu = 0 if coal_mmbtu == .
	replace natgas_mmbtu = 0 if natgas_mmbtu == .
	replace oil_mmbtu = 0 if oil_mmbtu == .
	replace elecb_mmbtu = 0 if elecb_mmbtu == .
	gen energy_mmbtu = oil_mmbtu + natgas_mmbtu + coal_mmbtu + elecb_mmbtu
	collapse (sum) oil_mmbtu natgas_mmbtu coal_mmbtu elecb_mmbtu energy_mmbtu, by(yr)
	gen oil_s = oil_mmbtu/energy_mmbtu
	gen natgas_s = natgas_mmbtu/energy_mmbtu
	gen coal_s = coal_mmbtu/energy_mmbtu
	gen elec_s = elecb_mmbtu/energy_mmbtu
	graph twoway (connected natgas_s yr if yr >= 2009) (connected coal_s yr if yr >= 2009) (connected oil_s yr if yr >= 2009) (connected elec_s yr if yr >= 2009), ///
	graphregion(color(white)) legend(label(1 "Natural Gas") label(2 "Coal") label(3 "Oil") label(4 "Electricity")) ///
	xlabel(2009[1]2018)
	graph export Output/Graphs/EnergyQuantityShare_year.pdf, replace
restore


**************
*** Mixing ***
**************

* Define mixing relative to different thresholds:
gen fuelmix100 = 0
replace fuelmix100 = 1 if (coal_s != 1 & coal_s != .) & (oil_s != 1 & oil_s !=.) & (natgas_s != 1 & natgas_s !=.)
lab var fuelmix100 "Mixing between fuels"
gen fuelmix95 = 0
replace fuelmix95 = 1 if (coal_s < 0.95 & coal_s != .) & (oil_s < 0.95 & oil_s !=.) & (natgas_s < 0.95 & natgas_s !=.)
lab var fuelmix95 "Mixing betwen fuels, 95%"
gen fuelmix99 = 0
replace fuelmix99 = 1 if(coal_s < 0.99 & coal_s != .) & (oil_s < 0.99 & oil_s !=.) & (natgas_s < 0.99 & natgas_s !=.)
lab var fuelmix99 "Mixing betwen fuels, 99%"
gen fuelmix98 = 0
replace fuelmix98 = 1 if (coal_s < 0.98 & coal_s != .) & (oil_s < 0.98 & oil_s !=.) & (natgas_s < 0.98& natgas_s !=.)
lab var fuelmix98 "Mixing betwen fuels, 98%"
gen fuelmix90 = 0
replace fuelmix90 = 1 if (coal_s < 0.90 & coal_s != .) & (oil_s < 0.90 & oil_s !=.) & (natgas_s < 0.90 & natgas_s !=.)
lab var fuelmix90 "Mixing betwen fuels, 90%"

*** GRAPH: PROPORTION OF SPECIFIC SINGLE FUEL USE AND MIXING ***
gen natgas_only = 1 if (natgas_s > 0) & (coal_s == 0) & (oil_s == 0) 
gen oil_only = 1 if (natgas_s == 0) & (coal_s == 0) & (oil_s > 0) 
gen coal_only = 1 if (natgas_s == 0) & (coal_s > 0) & (oil_s == 0) 
gen mixing = 1 if (anyfuel == 1) & (natgas_only == .) & (oil_only == .) & (coal_only == .) 
su anyfuel, detail
mat fuelcount = r(sum)
su natgas_only, detail
mat natgasonly = r(sum)
mat natgasonly = natgasonly[1,1]/fuelcount[1,1]
su oil_only, detail
mat oilonly = r(sum)
mat oilonly = oilonly[1,1]/fuelcount[1,1]
su coal_only, detail
mat coalonly = r(sum)
mat coalonly = coalonly[1,1]/fuelcount[1,1]
su mixing, detail
mat mixing = r(sum)
mat mixing = mixing[1,1]/fuelcount[1,1]
mat xaxis_specificfuel = (1\2\3\4)
mat specific_fuelprop = (natgasonly\coalonly\oilonly\mixing)
svmat xaxis_specificfuel 
svmat specific_fuelprop
graph bar (asis) specific_fuelprop1, over(xaxis_specificfuel1, ///
relabel(1 "Natural gas only" 2 "Coal only" 3 "Oil only" 4 "Mixing")) ///
ytitle("Fraction of firms") graphregion(color(white))
graph export Output\Graphs\Fueltype_Firmprop.pdf, replace 

*** GRAPH: PROPORTION OF SINGLE FUEL USE VS MIXING ***
gen single_fuel = 0
replace single_fuel = 1 if fuelmix100 == 0
preserve
	collapse (sum) fuelmix100 single_fuel
	lab var fuelmix100 "Mixing"
	lab var single_fuel "Single Fuel use"
	gen mix_single_total = fuelmix100 + single_fuel
	replace fuelmix100 = fuelmix100/mix_single_total
	replace single_fuel = single_fuel/mix_single_total
	graph bar (asis) fuelmix100 single_fuel, bargap(100) blabel(name)
	graph export Output\Graphs\MixingSingle_Firmprop.pdf, replace 
restore


*** GRAPH: DISTRIBUTION OF FUEL QUANTITY USE WITH AND WITHOUT MIXING ***
gen energy_mix = natgas_mmbtu + oil_mmbtu + coal_mmbtu
gen logEnergy_mix = log(energy_mix)
lab var logEnergy_mix "log(Energy) - mmBtu"
twoway (hist logEnergy_mix if fuelmix95 == 0, frac lcolor(gs12) fcolor(gs12)) ///
 (hist logEnergy_mix if fuelmix95 == 1, frac lcolor(red) fcolor(none)), ///
 legend(label(1 "Singe Fuel plants") label(2 "Multiple Fuels plants"))  graphregion(color(white))
 graph export Output/Graphs/Energy_Mixing-Dist.pdf, replace


*** GRAPH : PROPORTION OF SINGLE FUEL USE ABOVE THRESHOLD ***
gen prop_singlef_100 = 1 if (natgas_s == 1 & natgas_s != .) | (oil_s == 1 &  oil_s !=.) | (coal_s == 1 & coal_s !=.) 
gen prop_singlef_99 = 1 if (natgas_s >= 0.99 & natgas_s != .) | (oil_s >= 0.99 &  oil_s !=.) | (coal_s >= 0.99 & coal_s !=.) 
gen prop_singlef_95 = 1 if (natgas_s >= 0.95 & natgas_s != .) | (oil_s >= 0.95 &  oil_s !=.) | (coal_s >= 0.95 & coal_s !=.) 
gen prop_singlef_90 = 1 if (natgas_s >= 0.90 & natgas_s != .) | (oil_s >= 0.90 &  oil_s !=.) | (coal_s >= 0.90 & coal_s !=.) 
su prop_singlef_100, detail
mat fuelcount_100 = r(sum)
mat fuelcount_100 = fuelcount_100[1,1]/fuelcount[1,1]
su prop_singlef_99, detail
mat fuelcount_99 = r(sum)
mat fuelcount_99 = fuelcount_99[1,1]/fuelcount[1,1]
su prop_singlef_95, detail
mat fuelcount_95 = r(sum)
mat fuelcount_95 = fuelcount_95[1,1]/fuelcount[1,1]
su prop_singlef_90, detail
mat fuelcount_90 = r(sum)
mat fuelcount_90 = fuelcount_90[1,1]/fuelcount[1,1]
mat xaxis = (90\95\99\100)
mat fuelprop = (fuelcount_90\fuelcount_95\fuelcount_99\fuelcount_100)
svmat xaxis
svmat fuelprop
graph bar (asis) fuelprop1, over(xaxis1, relabel(1 ">90 %" 2 ">95 %" 3 ">99 %" 4 "100 %")) ytitle("Fraction of firms") graphregion(color(white))
graph export Output\Graphs\FuelThreshold_FirmProp.pdf, replace  


*** TABLE: EFFECT OF MULTIPLE OUTPUTS ON MIXING ***
* Revenue productivity of labor
*gen labor_revprod = SalesGross_tot/nEmployees_tot
lab var labor_revprod "Sales Per Worker"
lab var nEmployees_tot "Total number of Workers"
* Number of products firm makes
gen nofproducts = 0
replace nofproducts = 1 if QtyManuf_o1 != . & QtyManuf_o2 !=.
replace nofproducts = 2 if QtyManuf_o1 != . & QtyManuf_o2 !=. & QtyManuf_o3 !=.
replace nofproducts = 3 if QtyManuf_o1 != . & QtyManuf_o2 !=. & QtyManuf_o3 !=. ///
& QtyManuf_o4 !=.
replace nofproducts = 4 if QtyManuf_o1 != . & QtyManuf_o2 !=. & QtyManuf_o3 !=. ///
& QtyManuf_o4 !=. & QtyManuf_o5 !=.
* Indicator for being multiproduct	
gen multiproduct = 0
replace multiproduct = 1 if QtyManuf_o1 != . & QtyManuf_o2 !=.
lab var multiproduct "Multiple Outputs"
* Logit effect of being a multiproduct firm on mixing

eststo clear
logit fuelmix99 multiproduct if labor_revprod != . & nEmployees_tot != .
margins, dydx(multiproduct) post
eststo mdl1, title("No controls"): margins
logit fuelmix99 multiproduct i.ind2d if labor_revprod != . & nEmployees_tot != .
margins, dydx(multiproduct) post
eststo mdl2, title("Industry dummies"): margins
logit fuelmix99 multiproduct i.ind2d labor_revprod nEmployees_tot
margins, dydx(multiproduct) post
eststo mdl3, title("Control for size and Gross output per worker"): margins
esttab using Output/Tables/Mixing/MultProd.tex, mtitles label replace booktabs


*-----------------------
* Graph: GHG emissions *
*-----------------------

preserve
	replace coal_mmbtu = 0 if coal_mmbtu == .
	replace natgas_mmbtu = 0 if natgas_mmbtu == .
	replace oil_mmbtu = 0 if oil_mmbtu == .
	gen ghg = (gamma_coal*coal_mmbtu)+(gamma_oil*oil_mmbtu)+(gamma_natgas*natgas_mmbtu)
	collapse (sum) ghg, by(yr)
	replace ghg = ghg/100000000
	*** GRAPH OF AGGREGATE GHG EMISSIONS ***
	graph twoway (connected ghg yr if yr >= 2009), graphregion(color(white)) xlabel(2009[1]2018) ytitle("CO2e (Million tonnes)")
	graph export Output/Graphs/AggGHG_year_UnbalancedPanel.pdf, replace
restore


**********************
*** Fuel Switching ***
**********************

local vars oil natgas coal
foreach v of local vars {
	replace `v'_mmbtu = 0 if `v'_mmbtu == . & (OtherFuel > 0 | coal_mmbtu > 0 |  natgas_mmbtu > 0 | oil_mmbtu > 0)
	replace `v'_s = 0 if `v'_s == . & (OtherFuel > 0 | coal_mmbtu > 0 |  natgas_mmbtu > 0 | oil_mmbtu > 0)
}
replace OtherFuel = 0 if OtherFuel == . & (OtherFuel > 0 | coal_mmbtu > 0 |  natgas_mmbtu > 0 | oil_mmbtu > 0)


*------------------------------------
* Define switching and summary stats
*------------------------------------
* Balance the panel and keep fuel users
keep if plant_id != .
keep if yr >= 2009
drop if coal_s ==.
egen nyear = total(inrange(yr, 2009, 2017)), by(plant_id)
keep if nyear >= 4
xtset plant_id yr
sort plant_id yr



/*

/*
*** More cleaning ***
* Match change in age
by plant_id: gen agediff = age[_n]-age[_n-1]
replace agediff = 1 if agediff == .
replace agediff = . if agediff != 1
egen sum_agediff = total(agediff), by(plant_id)
su sum_agediff
keep if sum_agediff == `r(max)'
*/

* Define 4 switching categories (every case includes variation at the extensive margin)
/*
1. Single fuel other single fuel
2. Single fuel to mixing
3. Mixing to single
4. Mixing to mixing (new mix)
*/
gen fuelswitch = 0
by plant_id: replace fuelswitch = 1 if (L.fuelmix100 == 0 & fuelmix100 == 0 & coal_s > 0 & L.coal_s == 0) ///
| (L.fuelmix100 == 0 & fuelmix100 == 0 & oil_s > 0 & L.oil_s == 0) ///
| (L.fuelmix100 == 0 & fuelmix100 == 0 & natgas_s > 0 & L.natgas_s == 0)
by plant_id: replace fuelswitch = 2 if L.fuelmix100 == 0 & fuelmix100 == 1
by plant_id: replace fuelswitch = 3 if L.fuelmix100 == 1 & fuelmix100 == 0
/*by plant_id: replace fuelswitch = 3 if (L.fuelmix100 == 1 & fuelmix100 == 0 & L.coal_s > 0 & coal_s == 0) ///
| (L.fuelmix100 == 1 & fuelmix100 == 0 & L.oil_s > 0 & oil_s == 0) ///
| (L.fuelmix100 == 1 & fuelmix100 == 0 & L.natgas_s > 0 & natgas_s == 0)*/
by plant_id: replace fuelswitch = 4 if (L.fuelmix100 == 1 & fuelmix100 == 1 & L.coal_s == 0 & coal_s > 0) ///
| (L.fuelmix100 == 1 & fuelmix100 == 1 & L.oil_s == 0 & oil_s > 0) ///
| (L.fuelmix100 == 1 & fuelmix100 == 1 & L.natgas_s == 0 & natgas_s > 0)
lab def fuelswitch 0 "No switching" 1 "Single to Single" 2 "Single to mixing" 3 "Mixing to single" 4 "Mixing to mixing", replace
lab val fuelswitch fuelswitch
* Dummy for switching in any category
gen fuelswitch_dum = 0
replace fuelswitch_dum = 1 if fuelswitch > 0

* TABLE : Count the number of unique firms that switch in any category
preserve
	collapse (sum) fuelswitch_dum, by(plant_id)
	replace fuelswitch_dum = 1 if fuelswitch_dum > 1
	egen totswitch = total(fuelswitch_dum)
	gen totnoswitch = _N-totswitch
	file close _all
	file open TabSwitchers using Output/Tables/Switching/nSwitchers.tex, write replace
	file write TabSwitchers "& Firms who never swith & Firms who switch & Total \\ \midrule"_n
	su totswitch
	local s: di %12.0fc r(mean)
	local frac_s: di %12.2fc = r(mean)/_N
	su totnoswitch
	global ns: di %12.0fc r(mean)
	global frac_ns: di %12.2fc r(mean)/_N
	local N: di %12.0fc _N
	file write TabSwitchers "Number & $ns & `s' & `N' \\"_n
	file write TabSwitchers "Fraction & $frac_ns & `frac_s' & 1 \\"_n
	file write TabSwitchers "\bottomrule"
	file close _all
restore
* TABLE : Count the number of unique firms that switch in each category (not mutual exclusive)
preserve
	forvalues i = 1/4 {
			gen switch`i' = 1 if fuelswitch == `i'
		}
	collapse (sum) switch1 switch2 switch3 switch4, by(plant_id)
	forvalues i = 1/4 {
		replace switch`i' = 1 if switch`i' > 1
		egen tot`i' = total(switch`i')
	}
	* 1. Cross table between single to mixing and mixing to single
	lab def switch2 0 "No" 1 "Yes", replace
	lab def switch3 0 "No" 1 "Yes", replace
	lab val switch2 switch2
	lab val switch3 switch3
	eststo clear
	estpost tab switch2 switch3
	esttab using "Output/Tables/Switching/nSwitchers_category_excl.tex", ///
	cell(b(fmt(0))) collabels(none) unstack noobs nonumber nomtitle booktabs ///
	eqlabels(, lhs("Single to Mix (Row)/Mix to Single (Column)")) varlabels(, blist(Total)) replace
	* 2. In each category (not mutually exclusive)
	file close _all
	file open TabSwitchers using Output/Tables/Switching/nSwitchers_category.tex, write replace
	file write TabSwitchers "& Never switch & Single to Single & Single to Mix & Mix to single & Mix to Mix & Number of Firms \\ \midrule"_n
	file write TabSwitchers "Number & $ns & "
	forvalues i = 1/4 {
		su tot`i'
		local s: di %12.0fc r(mean)
		file write TabSwitchers "`s' & "
	}
	local N: di %12.0fc _N
	file write TabSwitchers "`N' \\"_n
	file write TabSwitchers "Fraction & $frac_ns & "
	forvalues i = 1/4 {
		su tot`i'
		local frac_s: di %12.2fc r(mean)/_N
		file write TabSwitchers "`frac_s' & "
	}
	local N: di %12.0fc _N
	file write TabSwitchers "N/A \\"_n
	file write TabSwitchers "\bottomrule"
	file close _all
restore

*GRAPH: ONE WAY SWITCHING BEHAVIOR
by plant_id: gen switch_natgas = 1 if (L.natgas_s == 0 & natgas_s > 0) 
by plant_id: gen switch_coal = 1 if (L.coal_s == 0 & coal_s > 0) 
by plant_id: gen switch_oil = 1 if (L.oil_s == 0 & oil_s > 0) 
local vars switch_natgas switch_coal switch_oil
foreach v of local vars {
	replace `v' = 0 if `v' == .
}
preserve
	collapse (mean) switch_natgas switch_coal switch_oil, by(yr)
	su yr
	drop if yr == `r(min)'
	gen totswitch = switch_natgas+switch_coal+switch_oil
	replace switch_natgas = switch_natgas/totswitch
	replace switch_coal = switch_coal/totswitch
	replace switch_oil = switch_oil/totswitch
	* Make graph
	graph twoway (connected switch_natgas yr) (connected switch_oil yr) (connected switch_coal yr), ///
	graphregion(color(white)) xlabel(2010[1]2017) ytitle("probability conditional on switching") xtitle("Year") ///
	legend(label(1 "Switch to Natural Gas") label(2 "Switch to Oil") label(3 "Switch to Coal"))
	graph export Output/Graphs/Switch_year.pdf, replace
restore

*GRAPHs: TWOWAYS SWITCHING BEHAVIOR
* Define switching between fuels
by plant_id: gen coal_natgas = 1 if (L.coal_s > 0 & L.natgas_s == 0 & natgas_s > 0) 
by plant_id: gen natgas_coal = 1 if (L.coal_s == 0 & L.natgas_s > 0 & coal_s > 0) 
by plant_id: gen oil_natgas = 1 if (L.oil_s > 0 & L.natgas_s == 0 & natgas_s > 0) 
by plant_id: gen natgas_oil = 1 if (L.oil_s == 0 & L.natgas_s > 0 & oil_s > 0) 
by plant_id: gen coal_oil = 1 if (L.coal_s > 0 & L.oil_s == 0 & oil_s > 0) 
by plant_id: gen oil_coal = 1 if (L.coal_s == 0 & L.oil_s > 0 & coal_s > 0)
local vars coal_natgas natgas_coal oil_natgas natgas_oil coal_oil oil_coal
foreach v of local vars {
	replace `v' = 0 if `v' == .
}
preserve
	collapse (mean) coal_natgas natgas_coal oil_natgas natgas_oil coal_oil oil_coal, by(yr)
	su yr
	drop if yr == `r(min)'
	* Replace by conditional probabilities
	gen twoway_coalnatgas = coal_natgas+natgas_coal
	gen twoway_natgasoil = oil_natgas+natgas_oil
	gen twoway_oilcoal = coal_oil+oil_coal
	replace coal_natgas = coal_natgas/twoway_coalnatgas
	replace natgas_coal = natgas_coal/twoway_coalnatgas
	replace oil_natgas = oil_natgas/twoway_natgasoil
	replace natgas_oil = natgas_oil/twoway_natgasoil
	replace coal_oil = coal_oil/twoway_oilcoal
	replace oil_coal = oil_coal/twoway_oilcoal
	* Make graphs
	*1. Coal and Natural Gas
	graph twoway (connected coal_natgas yr) (connected natgas_coal yr), ///
	graphregion(color(white)) xlabel(2010[1]2017) ytitle("probability conditional on switching") xtitle("Year") ///
	legend(label(1 "Coal to Natural Gas") label(2 "Natural Gas to Coal"))
	graph export Output/Graphs/SwitchCoalNatgas_year.pdf, replace
	*2. Oil and Natural Gas
	graph twoway (connected oil_natgas yr) (connected natgas_oil yr), ///
	graphregion(color(white)) xlabel(2010[1]2017) ytitle("probability conditional on switching") xtitle("Year") ///
	legend(label(1 "Oil to Natural Gas") label(2 "Natural Gas to Oil"))
	graph export Output/Graphs/SwitchOilNatgas_year.pdf, replace
	*3 Coal and Oil
	graph twoway (connected coal_oil yr) (connected oil_coal yr), ///
	graphregion(color(white)) xlabel(2010[1]2017) ytitle("probability conditional on switching") xtitle("Year") ///
	legend(label(1 "Coal to Oil") label(2 "Oil to Coal"))
	graph export Output/Graphs/SwitchCoalOil_year.pdf, replace
restore

*-------------------------------------------
* Aggregate GHG emissions and decomposition
*-------------------------------------------
*** GRAPHS: AGGREGATE GHG EMISSIONS ***
preserve
	* GHG emissions
	gen ghg = gamma_oil*oil_mmbtu + gamma_coal*coal_mmbtu + gamma_natgas*natgas_mmbtu
	* Total variation in GHG
	by plant_id: gen ghg_diff = D.ghg
	* Decompose variation between within and across fuels
	local vars coal oil natgas
	foreach v of local vars {
		by plant_id: gen `v'_diff = D.`v'_mmbtu
		by plant_id: gen `v'_noswitch_diff = D.`v'_mmbtu if (L.`v'_mmbtu > 0 & `v'_mmbtu > 0)
		replace `v'_noswitch_diff = 0 if `v'_noswitch_diff == . & yr > 2009
		by plant_id: gen `v'_switch_diff = D.`v'_mmbtu if (L.`v'_mmbtu > 0 & `v'_mmbtu==0) | (L.`v'_mmbtu == 0 & `v'_mmbtu > 0)
		replace `v'_switch_diff = 0 if `v'_switch_diff == . & yr > 2009
	}
	gen ghg_switch_diff = (coal_switch_diff*gamma_coal)+(oil_switch_diff*gamma_oil)+(natgas_switch_diff*gamma_natgas)
	gen ghg_noswitch_diff = (coal_noswitch_diff*gamma_coal)+(oil_noswitch_diff*gamma_oil)+(natgas_noswitch_diff*gamma_natgas)
	collapse (sum) ghg ghg_diff ghg_switch_diff ghg_noswitch_diff, by(yr)
	* kg to million tonnes
	replace ghg = ghg/100000000 
	replace ghg_diff = ghg_diff/100000000 
	replace ghg_switch_diff = ghg_switch_diff/100000000 
	replace ghg_noswitch_diff = ghg_noswitch_diff/100000000
	*** Graph of aggregate GHG emissions ***
	graph twoway (connected ghg yr), graphregion(color(white)) xlabel(2009[2]2017) ytitle("CO2e (Million tonnes)")
	graph export Output/Graphs/AggGHG_year_BalancedPanel.pdf, replace
	*** Graph of aggregate change in GHG emissions ***
	graph twoway (connected ghg_diff yr if yr > 2009) (connected ghg_switch_diff yr if yr > 2009) (connected ghg_noswitch_diff yr if yr > 2009), ///
	graphregion(color(white)) xlabel(2010[1]2017) ytitle("CO2e (Million tonnes)") yline(0) ///
	legend(label(1 "Total change") label(2 "Change due to switching") label(3 "Change within fuels"))
	graph export Output/Graphs/AggGHGchange_year_BalancedPanel.pdf, replace
	* Fraction of change between switching and within fuels (absolute values)
	gen abs_switch = abs(ghg_switch_diff)
	gen abs_noswitch = abs(ghg_noswitch_diff)
	gen total_switch = abs(ghg_switch_diff)+abs(ghg_noswitch_diff)
	gen frac_switch = abs(ghg_switch_diff)/total_switch
	gen frac_noswitch = abs(ghg_noswitch_diff)/total_switch
	gen zero = 0
	gen perc1 = 1
	graph twoway (rarea zero frac_switch yr if yr > 2009) (rarea frac_switch perc1 yr if yr > 2009), ///
	legend(label(1 "Change due to switching") label(2 "Change within fuels") pos(1)) graphregion(color(white)) ///
	xlabel(2010[1]2017)
	graph export Output/Graphs/AggGHGchange_Decomposition_BalancedPanel.pdf, replace
restore

*---------------------------------------------------
* Relationship between switching and other variables
*---------------------------------------------------
* Measure of Energy (quantity)
replace coal_mmbtu = 0 if coal_mmbtu == .
replace natgas_mmbtu = 0 if natgas_mmbtu == .
replace oil_mmbtu = 0 if oil_mmbtu == .
replace elecb_mmbtu = 0 if elecb_mmbtu == .
gen energy_mmbtu = oil_mmbtu + natgas_mmbtu + coal_mmbtu + elecb_mmbtu
gen E = energy_mmbtu
* Inputs in production technology
rename nEmployees_tot L
gen Lspend = Wages_tot
replace Import = 0 if Import == .
gen Mspend = TotInput+Import-Energy
rename TotFixedAsset_Gross_Open Kspend
replace Kspend = TotFixedAsset_Net_Open if K == 0
rename Energy Espend
rename SalesGross_tot Yspend
* Measure of debt capacity (net worth, leverage)
rename TotInventory_Open inv
rename TotalLiabilities_Open liab
gen networth = Kspend+inv-liab
gen leverage = liab/(Kspend+inv)
* Cash on hands
rename cash_Open cash
* Sales per worker (proxy for productivity)
gen SalesPerWorker = Y/L
* Convert units from rupees to lakhs (100,000 rupees)
replace Mspend = Mspend/100000
replace Espend = Espend/100000
replace Kspend = Kspend/100000
replace Lspend = Lspend/100000
replace Yspend = Yspend/100000
replace SalesPerWorker = SalesPerWorker/100000
replace cash = cash/100000
replace networth = networth/100000

*** TABLES: EFFECT OF SWITCHING ON REVENUES (PROXY FOR PRODUCTIVITY) ***
* Revenue production function
gen logL = log(Lspend)
gen logK = log(Kspend)
gen logE = log(Espend)
gen logM = log(Mspend)
gen logY = log(Yspend)
lab var logY "Sales"
lab val logY logY
lab var logK "Capital Spending"
lab val logK logK
lab var logL "Labor Spending"
lab val logL logL
lab var logM "Intermediate Spending"
lab val logM logM
lab var logE "Energy Spending"
lab val logE logE
lab def fuelswitch_dum 0 "Not Switching" 1 "Switching", replace
lab val fuelswitch_dum fuelswitch_dum
* TABLE: Period of switching only
gen F_fuelswitch_dum = F.fuelswitch_dum
lab def F_fuelswitch_dum 0 "Not Switching" 1 "Switching", replace
lab val F_fuelswitch_dum F_fuelswitch_dum 
gen F_fuelswitch = F.fuelswitch
lab def F_fuelswitch 0 "No Switching" 1 "Single to Single" 2 "Single to Mixing" 3 "Mixing to Single" 4 "Mixing to Mixing", replace
lab val F_fuelswitch F_fuelswitch
eststo clear
eststo mdl1: reg logY logK logM logL logE i.F_fuelswitch_dum	
eststo mdl2: reg logY logK logM logL logE i.F_fuelswitch
esttab using "Output/Tables/Switching/Switching_RevProd.tex", label wide ///
	 unstack mtitles("Switching Dummy" "Switching Categories") booktabs star(+ 0.1 * 0.05 ** 0.01 *** 0.001) ///
	 p title("Relationship between Gross output and plants who switch at next period") ///
	 addnotes("Capital, labor, intermediates and energy are in logs") replace
* TABLE: Switching in any period (entire firm)
by plant_id: egen totalswitch = total(fuelswitch)
replace totalswitch = 1 if totalswitch > 1
lab def totalswitch 0 "Not a switcher" 1 "Switcher", replace
lab val totalswitch totalswitch
eststo clear
eststo mdl1: reg logY logK logM logL logE i.totalswitch
esttab using "Output/Tables/Switching/Switchers_RevProd.tex", label wide ///
	 unstack nomtitle booktabs star(+ 0.1 * 0.05 ** 0.01 *** 0.001) ///
	 p title("Relationship between Gross output and plants who switch at least once") replace

*** GRAPH: AVERAGE REVENUE PRODUCTIVITY FOR SWITCHERS VS NON-SWITCHERS ***
*1. Switching at any period
preserve
	reg logY logK logM logL logE
	predict revprod, residuals
	collapse (mean) revprod, by(yr totalswitch)
	graph twoway (connected revprod yr if totalswitch == 0) (connected revprod yr if totalswitch== 1), graphregion(color(white)) ///
	legend(label(1 "Not a Switcher") label(2 "Switcher")) xlabel(2009[1]2017) xtitle("Year") ytitle("Estimate of Revenue Productivity")
	graph export Output/Graphs/RevProdSwitching_year.pdf, replace
restore
*2. Switching next period
preserve
	reg logY logK logM logL logE
	predict revprod, residuals
	collapse (mean) revprod, by(yr F_fuelswitch_dum)
	graph twoway (connected revprod yr if F_fuelswitch_dum == 0) (connected revprod yr if F_fuelswitch_dum== 1), graphregion(color(white)) ///
	legend(label(1 "Not a Switcher") label(2 "Switcher")) xlabel(2009[1]2017) xtitle("Year") ytitle("Estimate of Revenue Productivity")
	graph export Output/Graphs/RevProdSwitchingNextPeriod_year.pdf, replace
restore

*** TABLE: EFFECT OF VARIABLES ON SWITCHING ***
lab var networth "Net Worth"
lab val networth networth
lab var cash "Cash on Hand"
lab val cash cash
lab var  SalesPerWorker "Sales Per Worker"
lab val SalesPerWorker SalesPerWorker
lab var  L "Number of workers"
lab val L L
lab var  E "Energy (mmbtu)"
lab val E E
lab var age "Age"
lab val age age

gen logLeverage = log(leverage)
lab var logLeverage "Leverage (Debt to Assets)"
lab val logLeverage logLeverage
gen logNetworth = log(networth)
lab var logNetworth "Net Worth"
lab val logNetworth logNetworth
gen logCash = log(cash)
lab var logCash "Cash"
lab val logCash logCash
gen logSalesPerWorker = log(SalesPerWorker)
lab var logSalesPerWorker "Sales per Worker"
lab val logSalesPerWorker logSalesPerWorker
gen logAge = log(age)
lab var logAge "Age"
lab val logAge logAge
gen logLqty = log(L)
lab var logLqty "Number of workers"
lab val logLqty logLqty
gen logEqty = log(E)
lab var logEqty "Energy"
lab val logEqty logEqty

* Log prices
bysort yr: egen avg_p_natgas_mmbtu = mean(p_natgas_mmbtu)
replace p_natgas_mmbtu = avg_p_natgas_mmbtu if p_natgas_mmbtu == .
bysort yr: egen avg_p_coal_mmbtu = mean(p_coal_mmbtu)
replace p_coal_mmbtu = avg_p_coal_mmbtu if p_coal_mmbtu == .
gen logP_oil_mmbtu = log(p_oil_mmbtu)
lab var logP_oil_mmbtu "Price of Oil"
lab val logP_oil_mmbtu logP_oil_mmbtu
gen logP_natgas_mmbtu = log(p_natgas_mmbtu)
lab var logP_natgas_mmbtu "Price of Natural Gas"
lab val logP_natgas_mmbtu logP_natgas_mmbtu
gen logP_coal_mmbtu = log(p_coal_mmbtu)
lab var logP_coal_mmbtu "Price of Coal"
lab val logP_coal_mmbtu logP_coal_mmbtu

xtset plant_id yr
reg logY logK logM logL logE
predict revprod, residuals
lab var revprod "Estimate of revenue productivity (OLS)"
lab val revprod revprod
replace fuelswitch_dum = 0 if fuelswitch == 1 | fuelswitch == 4 // remove fuel to fuel and mixing to mixing
* Table 1: Switching same year
eststo clear
quietly probit fuelswitch_dum logLeverage logCash revprod logL logE logM logK logAge
margins, dydx(*) post
eststo mdl1, title("Same period"): margins
quietly probit fuelswitch_dum logLeverage logCash revprod logL logE logM logK logAge logP_oil_mmbtu logP_natgas_mmbtu logP_coal_mmbtu
margins, dydx(*) post
eststo mdl2, title("Same period"): margins
quietly probit fuelswitch_dum logLeverage logCash revprod logL logE logM logK logAge logP_oil_mmbtu logP_natgas_mmbtu logP_coal_mmbtu i.ind3d
margins, dydx(*) post
eststo mdl3, title("Same period"): margins
esttab using "Output/Tables/Switching/SwitchingProbit_me.tex", title("Marginal effects, probability of switching (same period)") ///
star(+ 0.1 * 0.05 ** 0.01 *** 0.001) mtitles indicate(industry dummies = *ind3d) label replace ///
addnotes("All independent variables are in logs")

* Table 2: Switching next year
eststo clear
quietly probit F.fuelswitch_dum logLeverage logCash revprod logL logE logM logK logAge
margins, dydx(*) post
eststo mdl1, title("Next period"): margins
quietly probit F.fuelswitch_dum logLeverage logCash revprod logL logE logM logK logAge logP_oil_mmbtu logP_natgas_mmbtu logP_coal_mmbtu
margins, dydx(*) post
eststo mdl2, title("Next period"): margins
quietly probit F.fuelswitch_dum logLeverage logCash revprod logL logE logM logK logAge logP_oil_mmbtu logP_natgas_mmbtu logP_coal_mmbtu i.ind3d
margins, dydx(*) post
eststo mdl3, title("Next period"): margins
esttab using "Output/Tables/Switching/SwitchingProbit_me_lag.tex", title("Marginal effects, probability of switching (next period)") ///
star(+ 0.1 * 0.05 ** 0.01 *** 0.001) mtitles indicate(industry dummies = *ind3d) ///
addnotes("All independent variables are in logs") label replace


* GRAPH: Distribution of number of time plant switches
egen nswitch = total(fuelswitch_dum), by(plant_id)
hist nswitch, graphregion(color(white)) xtitle("Number of time plant switches")
graph export Output/Graphs/nTimesSwitch-Dist.pdf, replace

/*

local vars coal_s oil_s natgas_s
replace fuelswitch = 2 if L.fuelmix100 == 0 & fuelmix100 == 1

replace fuelswitch = 1 if L.fuelmix100 == 0 & ()
foreach v of local vars {
	replace fuelswitch = 1 if `v'
}
replace fuelswitch = 1 if {
	
}



* Balance the panel
egen nyear = total(inrange(yr, 2009, 2017)), by(plant_id)
keep if nyear == 9 & yr > 2009
sort plant_id yr
order Coal Oil Natgas plant_id yr coal_s oil_s natgas_s, last

* Define switching when firms go from using a single fuel to another fuel or to mixing
gen fuel_switch_gradual = 0
gen fuel_switch = 0
local vars coal_s oil_s natgas_s
foreach v of local vars {
	* Includes gradual switching
	gen `v'_diff = abs(`v'-L.`v')
	replace fuel_switch_gradual = 1 if `v'_diff >= 0.25 & `v'_diff != .
	replace fuel_switch = 1 if `v'_diff >= 0.9 & `v'_diff != .
}
* Tag all firms that switch at some point
bysort plant_id: egen avg_fuelswitch_gradual = mean(fuel_switch_gradual)
replace avg_fuelswitch_gradual = 1 if avg_fuelswitch_gradual > 0
bysort plant_id: egen avg_fuelswitch = mean(fuel_switch)
replace avg_fuelswitch = 1 if avg_fuelswitch > 0

* Effect of age on probability of switching
probit fuel_switch_gradual age
probit fuel_switch age

*** Variables of interests ***
* Revenue productivity of labor
gen labor_revprod = SalesGross_tot/nEmployees_tot
* Revenue productivity of energy
* Indicator for multiproduct firms
gen multiproduct = 0
replace multiproduct = 1 if QtyManuf_o1 != . & QtyManuf_o2 !=.
replace multiproduct = 2 if QtyManuf_o1 != . & QtyManuf_o2 !=. & QtyManuf_o3 !=.
replace multiproduct = 3 if QtyManuf_o1 != . & QtyManuf_o2 !=. & QtyManuf_o3 !=. ///
& QtyManuf_o4 !=.
replace multiproduct = 4 if QtyManuf_o1 != . & QtyManuf_o2 !=. & QtyManuf_o3 !=. ///
& QtyManuf_o4 !=. & QtyManuf_o5 !=.

* Effect of being a multiproduct firm on mixing
probit fuelmix99 i.multiproduct labor_revprod nEmployees_tot i.ind3d

* effect of other variables on probablity that the firm switches fuels
probit avg_fuelswitch_gradual labor_revprod nEmployees_tot i.ind3d i.yr

* Effect of switching on firm sales
gen logSales = log(SalesGross_tot)
gen logK = log(TotFixedAsset_Gross_Open)
gen logL = log(nEmployees_tot)
gen logE = log(energytot)

reg logSales logK logL logE i.avg_fuelswitch
reg logSales logK logL logE i.avg_fuelswitch_gradual

reg logSales logK logL logE fuel_switch
reg logSales logK logL logE fuel_switch_gradual

xtreg logSales logK logL logE fuel_switch
xtreg logSales logK logL logE fuel_switch_gradual
*/


*-------------------------
* Density of fuel shares
*-------------------------

twoway kdensity natgas_s || kdensity oil_s || kdensity coal_s, xtitle("Fuel share") ytitle("Density") graphregion(color(white)) ///
legend(ring(0) position(8) bmargin(large) bplacement(neast) label(1 "Natural gas") label(2 "Coal") label(3 "Oil"))
graph export Output\Graphs\FuelShare_Distribution.pdf, replace 


*/


